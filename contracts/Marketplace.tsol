pragma ever-solidity >= 0.61.2;

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

// Interfaces we needs
// This interface for transferring NFT to winner
import "@broxus/tip4/contracts/TIP4_1/interfaces/ITIP4_1NFT.tsol";
// This interface to accept NFT from owner
import "@broxus/tip4/contracts/TIP4_1/interfaces/INftTransfer.tsol";
import "@broxus/tip4/contracts/TIP4_1/interfaces/INftChangeManager.tsol";
// This interface for implementing tip-3 tokens receiving callback
import "@broxus/tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";

contract Marketplace is  INftChangeManager {

    uint256 static _nonce; // random nonce for affecting on address
    // address _owner; // owner of auction and nft
    
    address public _tokenWallet; // wallet for receive bids
    
    uint128 private _nftId;
    
    uint128 private _sale_cost;
    uint128 private _listing_cost;

    bool test = false;

    struct ListedToken {
        uint256 nftId;
        address nft_address;
        address owner;
        address manager;
        uint128 price;
        bool currentlyListed;
    }

    event TokenListedSuccess(
        uint256 nftId,
        address nft_address,
        address owner,
        address manager,
        uint128 price,
        bool currentlyListed
    );

    mapping(uint256 => ListedToken) public id_listed_token;
    mapping(address => ListedToken) public address_listed_token;

    constructor(
        address sendRemainingGasTo,
        uint128 sale_cost,
        uint128 listing_cost
    ) public {
        tvm.accept();
        tvm.rawReserve(1 ever, 0);

      sendRemainingGasTo.transfer({ value: 0, flag: 128, bounce: false });
      _sale_cost = sale_cost;
      _listing_cost = listing_cost;
    }
    
    function onNftChangeManager(
        uint256 id,
        address owner,
        address oldManager,
        address newManager,
        address collection,
        address sendGasTo,
        TvmCell payload
    ) override external {  
        tvm.rawReserve(_listing_cost, 0);
        uint128 price = abi.decode(payload, (uint128));
     
        uint256 nftId = _nftId;
        ListedToken newToken = ListedToken(
            nftId,
            msg.sender,
            owner,
            newManager,
            price,
            true
        );

        id_listed_token[nftId] = newToken;
        address_listed_token[msg.sender] = newToken;
        _nftId++;

        emit TokenListedSuccess(
            nftId,
            msg.sender,
            owner,
            newManager,
            price,
            true
        );
    }

    function generatePayload(uint128 price) external view
		virtual
		responsible
		returns (
			TvmCell payload
		){
            require(price > 0, 101);
            TvmBuilder payloadBuilder;
            payloadBuilder.store(price);

            return {value: 0, bounce: false, flag: 64} (
				payloadBuilder.toCell()
			);
    }

    function check_test ()external view virtual responsible returns (bool){
        return {value: 0, bounce: false, flag: 64} (test);
    }

    function buyNft(
        address sendRemainingGasTo,
        address nft_address
    ) public {
    
        ListedToken nft = address_listed_token[nft_address];
        uint128 price = nft.price;


        if (msg.value < (price + _sale_cost)) {
            // msg.sender.transfer(msg.value, false, 64);
            test = true;
        } else {            
            tvm.rawReserve(_sale_cost, 0);
        
            // uint256 nftId;
            // address nft_address;
            // address owner;
            // address manager;
            // uint128 price;
            // bool currentlyListed;
        
            mapping(address => ITIP4_1NFT.CallbackParams) noCallbacks;

            ITIP4_1NFT(nft.nft_address).transfer{
                value: 0,
                flag: 128,
                bounce: false
            }(
                msg.sender,
                sendRemainingGasTo,
                noCallbacks
            );

            // nft.owner.transfer(price, false, 64);

            nft.owner = msg.sender;
            nft.manager = msg.sender;
            nft.price = 0;
            nft.currentlyListed = false;

            address_listed_token.replace(nft_address, nft);
        }
    }

    function get_nftId() public view responsible returns (uint){
        return { value: 0, flag: 64, bounce: false } ( _nftId);
    }

    function getAllNFTs() public view responsible returns (ListedToken[]) {
        uint256 nftCount = _nftId;
        ListedToken[] nfts = new ListedToken[](nftCount);
        uint256 currentIndex = 0;
        for(uint256 i = 0; i < nftCount; i++){
            if(id_listed_token[i].owner != address(0)){
                ListedToken currentToken = id_listed_token[i];
                nfts[currentIndex] = currentToken;
                currentIndex++;
            }
        }
        return { value: 0, flag: 64, bounce: false }  (nfts);
    }

    function get_nft_by_address (address nft_address) public view responsible returns (ListedToken) {
        ListedToken token = address_listed_token[nft_address];
        return { value: 0, flag: 64, bounce: false } (token);
    }
}